{
	"info": {
		"_postman_id": "938650b9-a026-4683-a055-88d847932d4a",
		"name": "Route02 /student/{student_id}",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35335342"
	},
	"item": [
		{
			"name": "TC7",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "TC8",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Error message is returned\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"error\", \"Student ID 100 does not exist\");\r",
							"});\r",
							"pm.test(\"Response does not contain student data\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.not.have.property(\"id\");\r",
							"    pm.expect(responseBody).to.not.have.property(\"name\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/student/100",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"student",
						"100"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC9",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is returned\", function () {\r",
							"    const responseBody = pm.response.text(); \r",
							"    pm.expect(responseBody).to.include(\"Not Found\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Response does not contain student data\", function () {\r",
							"    const responseBody = pm.response.text();\r",
							"    pm.expect(responseBody).not.to.include(\"id\");\r",
							"    pm.expect(responseBody).not.to.include(\"name\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/student/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"student",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "TC10",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Error message is returned\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"error\", \"Student ID abbabc is not formatted correctly.\");\r",
							"});\r",
							"pm.test(\"Response does not contain student data\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.not.have.property(\"id\");\r",
							"    pm.expect(responseBody).to.not.have.property(\"name\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/student/abbabc",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"student",
						"abbabc"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC11",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Error message is returned\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property(\"error\", \"Student ID @$% is not formatted correctly.\");\r",
							"});\r",
							"pm.test(\"Response does not contain student data\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.not.have.property(\"id\");\r",
							"    pm.expect(responseBody).to.not.have.property(\"name\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/student/@$%",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"student",
						"@$%"
					]
				}
			},
			"response": []
		}
	]
}